enum ContractCategory {
  LockupLinear
  LockupPro
}

enum StreamCategory {
  Cliff
  Linear
  Pro
}

enum ActionCategory {
  Transfer
  Create
  Cancel
  Renounce
  Withdraw
}

type Contract @entity {
  "unique identifier resolving to contract address"
  id: String!
  "hardcoded alias, resolved by replacing the contract address from the id with the contract alias"
  alias: String!
  "address of the contract"
  address: Bytes!
  "category of contract e.g. LockupLinear or LockupPro"
  category: ContractCategory!
  "streams created through this contract"
  streams: [Stream!]! @derivedFrom(field: "contract")
  "actions on streams, triggered through this contract"
  actions: [Action!]! @derivedFrom(field: "contract")
}

type Action @entity {
  "unique identifier resolving to transaction hash concatenated with the log index (there may be multiple actions per tx)"
  id: String!
  "contract through which the stream actions has been triggered"
  contract: Contract!
  "stream linked to this action"
  stream: Stream!
  "category of action e.g. Deposit or Withdraw"
  category: ActionCategory!

  "transaction details: hash"
  hash: Bytes!
  "transaction details: block number"
  block: BigInt!
  "transaction details: timestamp"
  timestamp: BigInt!
  "address that triggered the transaction"
  from: Bytes!

  "address of an actor, differs based on action type e.g. for Create it resolves to the sender"
  addressA: Bytes
  "address of an actor, differs based on action type e.g. for Transfer it resolves to the new recipient"
  addressB: Bytes

  "amount, differs based on action type e.g. for Deposit it resolves to the depositAmount"
  amountA: BigInt
  "amount, differs based on action type e.g. for Withdraw it resolves to the remainingAmount"
  amountB: BigInt
}

type Asset @entity(immutable: true) {
  "unique identifier resolving to the ERC20 asset/token address"
  id: ID!
  "hardcoded chain id"
  chainId: BigInt!
  "address of the ERC20 asset/token"
  address: Bytes!
  "decimals of the ERC20 asset/token"
  decimals: BigInt!
  "symbol of the ERC20 asset/token"
  symbol: String!
  "name of the ERC20 asset/token"
  name: String!
  "streams that rely on this asset/token"
  streams: [Stream!]! @derivedFrom(field: "asset")
}

type Stream @entity {
  "unique identifier for the stream, resolving to the origin contract address concatenated with the chainId and the tokenId"
  id: String!
  "hardcoded alias, resolved by replacing the contract address from the id with the contract alias"
  alias: String!
  "unique identifier for the stream released by the origin contract - same as the tokenId or streamId values given by the contract"
  tokenId: BigInt!
  "unique global id tracked by the subgraph watcher - ðŸš¨ these may change if new contracts are added and the chronological order of streams changes"
  subgraphId: BigInt!
  "contract through which this stream has been created"
  contract: Contract!
  "hardcoded chain id"
  chainId: BigInt!
  "type of stream (for sorting reasons)"
  category: StreamCategory!
  "source of funds for the stream (anyone can create and fund a stream on any sender's behalf)"
  funder: Bytes!
  "manager of the stream, defined at creation by the funder (usually the same as the funder)"
  sender: Bytes!
  "current recipient of the stream, can withdraw the funds (the recipient can change on stream/nft transfer)"
  recipient: Bytes!
  "list of relevant stream parties (for filtering) - usually sender and recipient"
  parties: [Bytes!]!
  "transaction hash for the stream creation"
  hash: Bytes!
  "timestamp of the stream creation (for sorting reasons)"
  timestamp: BigInt!
  "amount deposit in the stream (without fees)"
  depositAmount: BigInt!
  "amount of fees paid to the broker"
  brokerFeeAmount: BigInt!
  "amount of fees paid to the protocol"
  protocolFeeAmount: BigInt!
  "asset (ERC20 token) supported by this stream"
  asset: Asset!
  "timestamp for the start of the stream"
  startTime: BigInt!
  "timestamp for the end of the stream"
  endTime: BigInt!
  "timestamp for the start of the cliff, only available on linear streams"
  cliffTime: BigInt
  "derived amount of the cliff, only available on linear streams"
  cliffAmount: BigInt
  "flag showing the cancelability of the stream (making it false is a one-way trip)"
  cancelable: Boolean!
  "action in which the stream has been made non-cancelable (can be the deposit transaction or a different one)"
  cancelableAction: Action
  "timestamp for the when the stream was made non-cancelable"
  cancelableTime: BigInt
  "flag showing if the stream has been canceled (making it true is a one-way trip)"
  canceled: Boolean!
  "action in which the stream has been canceled"
  canceledAction: Action
  "timestamp for the when the stream was canceled"
  canceledTime: BigInt
  "amount resolving to the sum of all withdrawals"
  withdrawnAmount: BigInt!
  "amount resolving to the sum still inside the stream (regardless of it being locked or not) (difference between deposit and withdrawn)"
  intactAmount: BigInt!
  "actions triggered in the context of this stream"
  actions: [Action!]! @derivedFrom(field: "stream")
  "segments of the stream curve, only available on pro streams"
  segments: [Segment!]! @derivedFrom(field: "stream")
  "batch the stream is part of, only available when created within a batch create transaction"
  batch: Batch!
}

type Segment @entity {
  "unique id resolving to stream id concatenated with the position of the segment"
  id: String!
  "position of the segment inside the array"
  position: BigInt!
  "stream upon which the segment is used"
  stream: Stream!
  "amount resolving to the value streamed during this segment"
  amount: BigInt!
  "exponent for the time passed percentage of the main amount compute function"
  exponent: BigInt!
  "timestamp resolving to the end moment of the segment"
  milestone: BigInt!

  "timestamp resolving to the *milestone* parameter"
  endTime: BigInt!
  "timestamp resolving to the start moment of the segment (the end time of previous segment or the startTime of the stream)"
  startTime: BigInt!

  "derived amount resoling to the total amount streamed until the start of the segment"
  startAmount: BigInt!
  "derived amount resoling to the total amount streamed until the end of the segment"
  endAmount: BigInt!
}

type Batch @entity {
  "unique identifier of the batch, resolving to the hash of the parent transaction"
  id: String!
  "number of streams that are part of this batch"
  count: BigInt!
  "index of batch resolving to a conditional counter of 2+ stream batches, filtered by sender (label is null for batches containing a single stream, for filtering)"
  label: String
  "batcher (sender) that started this batch"
  batcher: Batcher
  "streams that are part of this batch"
  streams: [Stream!]! @derivedFrom(field: "batch")
  "hash of the transaction that created this batch"
  hash: Bytes!
  "timestamp of the transaction that created this batch"
  timestamp: BigInt!
}

type Batcher @entity {
  "unique identifier of the sender, resolving to their address"
  id: String!
  "address of the sender"
  address: Bytes!
  "numeric index, will be used to construct the batch label"
  batchIndex: BigInt!
  "batches started by this batcher (sender)"
  batches: [Batch!]! @derivedFrom(field: "batcher")
}

type Watcher @entity {
  "unique identifier for the watcher - there is only one watcher for the entire subgraph"
  id: String!
  "hardcoded chain id"
  chainId: BigInt!
  "global index for streams"
  streamIndex: BigInt!
  "flag that defines the initialization status of the subgraph"
  isInitialized: Boolean!
}
